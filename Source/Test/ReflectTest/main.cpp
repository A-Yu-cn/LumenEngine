// Source: https://github.com/Ubpa/USRefl

#include "Tools/USRefl_AutoRefl/Public/USRefl/USRefl.h"

// Vec's definition
// and Vec's reflection declaration (Vec_AutoRefl.inl, generated by tool before building)
#include "Vec.h"

using namespace Lumen::Refl;

#include <iostream>

using namespace Ubpa::USRefl;
using namespace std;

int main() {
	Vec<float> vec(2, 3);
	TypeInfo<Vec<float>>::ForEachVarOf(vec, [](auto field, auto&& var) {
		cout << field.name << " " << field.value << " : " << var;
		if (field.level == AccessSpecifier::PUBLIC) cout << " Public" << endl;
		else if (field.level == AccessSpecifier::PROTECTED) cout << " Protected" << endl;
		else if (field.level == AccessSpecifier::PRIVATE) cout << " Private" << endl;
	});

	TypeInfo<Vec<float>>::fields.ForEach([](auto field) {
		cout << field.name << endl;
	});

	auto& y_field = TypeInfo<Vec<float>>::fields.Find(TSTR("y"));
	assert(y_field.name == "y");

	static_assert(TypeInfo<Vec<float>>::fields.Contains(TSTR("x")));

	TypeInfo<Vec<float>>::attrs.ForEach([](auto attr) {
		cout << "name : " << attr.name << endl;
		if constexpr (!attr.has_value)
			cout << "value : " << attr.value << endl;
	});
}

