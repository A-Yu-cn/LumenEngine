#include "../Public/Derived.h"
#include <iostream>

using namespace Lumen::Test;

Derived::Derived()
{
    std::cout << "default constructor" << std::endl; 
};

Derived::Derived(int a)
{
    std::cout << "constructor with param" << std::endl; 
}

void Derived::F0()
{
    std::cout << "default func" << std::endl;
}

void Derived::F0(int a)
{
    std::cout << "func with param int" << std::endl;
}

void Derived::F0(float a)
{
    std::cout << "func with param float" << std::endl;
}

// This following is generated by Ubpa::USRefl::AutoRefl

using namespace Lumen::Test;

RTTR_REGISTRATION
{
    registration::class_<Lumen::Test::Derived>("Derived")
        .constructor<>()
        .constructor<int>()
        .property("mDerivedPub", &Derived::mDerivedPub)
        (
            metadata("info", "test")
        )
        .method("F0", select_overload<void()>(&Derived::F0))
        .method("F0", select_overload<void(int)>(&Derived::F0))
        .method("F0", select_overload<void(float)>(&Derived::F0))
        .property("mDerivedPri", &Derived::mDerivedPri)
    ;
}